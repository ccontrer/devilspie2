

Devilspie 2
-----------

Devilspie 2 is based on the excellent program Devil's Pie by Ross Burton, and
takes a folder as indata, and checks that folder for LUA scripts. These
scripts are run each time a window is opened, and the rules in them are applied
on the window.

Unfortunately the rules of the original Devils Pie are not supported.

If you don't give devilspie2 any folder with --folder, it will read LUA scripts
from the folder that it gets from the GLib function g_get_user_config_dir with
devilspie2/ added to the end - g_get_user_config_dir returns the config
directory as defined in the XDG Base Directory Specification. In most cases
would be the ~/.config/devilspie2/ folder, and this folder will be created if
it doesn't already exist. This folder is changeable with the --folder option.
If devilspie2 doesn't find any LUA files in the folder, it will stop execution.

Devilspie2 takes some options:

-h, --help          Show help options

-d, --debug         Print debug information to stdout
-e, --emulate       Don't apply any rules, but only emulate execution
-f, --folder        From which folder should we load our LUA scripts
-v, --version       Print program version and quit
-w, --wnck-version  Show version of libwnck and quit


simple script example:

---------------------8<---------------------

-- the debug_print command does only print anything to stdout
-- if devilspie2 is run using the --debug option
debug_print("Window Name: " .. get_window_name());
debug_print("Application name: " .. get_application_name())

-- I want my Xfce4-terminal to the right on the second screen of my two-monitor
-- setup. (Strings are case sensitive, please note this when creating rule
-- scripts.)
if (get_window_name()=="Terminal") then
   -- x,y, xsize, ysize
   set_window_geometry(1600,300,900,700);
end

-- Make Iceweasel always start maximized.
if (get_application_name()=="Iceweasel") then
   maximize();
end

--------------------->8---------------------

You can choose to have all script functionality in one file, or you can split
it up into several, Devilspie2 runs on all LUA files in ~/.config/devilspie2 -
that is all files with a .lua extension.


Scripting
---------

The scripting language used is LUA (see www.lua.org) - See FAQ at

www.lua.org/FAQ.html

, documentation at

www.lua.org/docs.html

, and tutorials at

http://lua-users.org/wiki/TutorialDirectory


The following commands are recognized by the Devilspie2 LUA interpreter:



The first group are functions to get data from a window:


get_window_name()

   returns a string containing the name of the current window.


get_window_has_name()

   return true or false depending on if the window has a name or not
   (from version 0.20)


get_application_name()

   returns the application name of the current window.


get_window_geometry()

   Returns the window geometry as four numbers - x-position, y-position,
   width and height. (from version 0.16)


get_window_client_geometry()

   returns the window geometry excluding the window manager borders as four
   numbers, x-position, y-position, width and height. (from version 0.16)


get_window_is_maximized()

   Returns true if the window is maximized, false otherwise. (available from
   version 0.21)


get_window_is_maximized_vertically()

   Returns true if the window is vertically maximized, false otherwise.
   (available from version 0.21)


get_window_is_maximized_horisontally()

   Returns true if the window is horisontally maximized, false otherwise.
   (available from version 0.21)


get_window_type()

   Returns the type of the window - The result type is a string, and can
   be one of the following:

   "WINDOW_TYPE_NORMAL"
   "WINDOW_TYPE_DESKTOP"
   "WINDOW_TYPE_DOCK"
   "WINDOW_TYPE_DIALOG"
   "WINDOW_TYPE_TOOLBAR"
   "WINDOW_TYPE_MENU"
   "WINDOW_TYPE_UTILITY"
   "WINDOW_TYPE_SPLASHSCREEN"

   or "WINDOW_TYPE_UNRECOGNIZED" if libwnck didn't recognize the type.

   If the function for some reason didn't have a window to work on the string
   result is "WINDOW_ERROR".

   (availible from version 0.21)


get_class_instance_name()

   Gets the class instance name from the WM_CLASS Property for the current window.
   Only available on libwnck 3+, and in devilspie2 version 0.21 or later.


get_window_property(property)

   Returns the window property described in the property string. For a list of
   available properties, you should see the page
   http://standards.freedesktop.org/wm-spec/wm-spec-latest.html

   (Available from version 0.21)


get_window_role

   Returns a string describing the current window role of the matched window as
   defined by it's WM_WINDOW_ROLE hint.


get_window_xid

   Returns the X window id of the current window.


get_window_class

   Returns a string representing the class of the current window.


and the rest of the commands are used to change the properties of the windows:


debug_print(string)

   Debug helper that prints a string to stdout. The string is only printed to
   stdout if devilspie2 is run with the --debug option, otherwise nothing will
   be printed.


set_window_position(xpos,ypos)

   Set the position of a window.


set_window_position2(xpos,ypos)

   Set the position of a window - Compared to set_window_position, this
   function uses XMoveWindow instead of wnck_window_set_geometry which
   gives a slightly different result.
   (Availible from version 0.21)


set_window_size (xsize, ysize)

   Sets the size of a window - takes xsize and ysize as parameters.


set_window_geometry (xpos, ypos, xsize, ysize)

   Sets both size and position of a window in one command. Takes four
   parameters, xpos, ypos, xsize and ysize.


set_window_geometry2 (xpos, ypos, xsize, ysize)

   Sets the window geometry just as set_window_geometry, using
   XMoveResizeWindow instead of its libwnck alternative. This results in
   different coordinates than the set_window_geometry function, and results
   are more similar to the results of the original devilspie geometry function.
   (available from version 0.21)


make_always_on_top()

   Sets a window always on top.


set_on_top()

   sets a window on top of the others. (unlike make_always_on_top, it doesn't
   lock the window in this position.)


shade()

   "Shades" a window, showing only the title-bar.


unshade()

   Unshades a window - the opposite of "shade"


maximize()

   maximizes a window


unmaximize()

   unmaximizes a window


maximize_vertically()

   maximizes the current window vertically.


maximize_horisontally()

   maximizes the current window horisontally.


minimize()

   minimizes a window


unminimize()

   unminimizes a window, that is bringing it back to screen from the minimized
   position/size.


decorate_window()

   Shows all window decoration.


undecorate_window()

   Removes all window decorations.


set_window_workspace(number)

   Moves a window to another workspace. The number variable starts counting at 1.


change_workspace(number)

   Changes the current workspace to another. The number variable starts counting
   at 1.


pin_window()

   asks the window manager to put the window on all workspaces.


unpin_window()

   Asks the window manager to put window only in the currently active workspace.


stick_window()

   Asks the window manager to keep the window's position fixed on the screen,
   even when the workspace or viewport scrolls.


unstick_window()

   Asks the window manager to not have window's position fixed on the screen
   when the workspace or viewport scrolls.


set_skip_tasklist(skip)

   Set this to true if you would like the window to skip listing in your
   tasklist. Takes a boolean(true or false) as value. (from version 0.16)


set_skip_pager(skip)

   Set this to true if you would like the window to skip listing in your pager.
   Takes a boolean(true or false) as value. (from version 0.16)


set_window_above()

   Set the current window above all normal windows. (availible from version
   0.21)


set_window_below()

   Set the current window below all normal windows. (availible from version
   0.21)




Please note that strings are case sensitive, comparing "SomeProgram" with
"someprogram" will not report equality.


Translations
------------

Devilspie2 is now translatable using gettext - see README.translators for more
information.


Authors
-------

see the AUTHORS file


Contact
-------

Author: Andreas RÃ¶nnquist
E-mail: gusnan@gusnan.se
Homepage: http://www.gusnan.se/devilspie2
Google groups: http://groups.google.com/group/devilspie2

IRC: #devilspie2 on irc.freenode.net
